// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Model;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Model.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20250214155324_BolerMigration")]
    partial class BolerMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Model.Entities.BoilerDevicesEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BoilerRoomName")
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("Installed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Instruction")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("NominalValue")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BoilerRoomName");

                    b.ToTable("BoilerDevices");
                });

            modelBuilder.Entity("Model.Entities.BoilerRoomEntity", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Adress")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("adress");

                    b.Property<string>("CompanyName")
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.HasKey("Name");

                    b.HasIndex("CompanyName");

                    b.ToTable("BoilerRoom", (string)null);
                });

            modelBuilder.Entity("Model.Entities.CompanyEntity", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("ContactPerson")
                        .HasColumnType("text");

                    b.Property<int?>("ContactPersonNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.HasKey("Name");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Company");
                });

            modelBuilder.Entity("Model.Entities.Users.RoleEntity", b =>
                {
                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Role");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Role = 0,
                            Name = "Admin"
                        },
                        new
                        {
                            Role = 1,
                            Name = "Worker"
                        },
                        new
                        {
                            Role = 2,
                            Name = "Client"
                        });
                });

            modelBuilder.Entity("Model.Entities.Users.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int>("RoleID")
                        .HasColumnType("integer");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("RoleID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Model.Entities.BoilerDevicesEntity", b =>
                {
                    b.HasOne("Model.Entities.BoilerRoomEntity", "BoilerRoom")
                        .WithMany("BoilerDevices")
                        .HasForeignKey("BoilerRoomName");

                    b.Navigation("BoilerRoom");
                });

            modelBuilder.Entity("Model.Entities.BoilerRoomEntity", b =>
                {
                    b.HasOne("Model.Entities.CompanyEntity", "Company")
                        .WithMany("BoilerRoomEntities")
                        .HasForeignKey("CompanyName");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Model.Entities.Users.UserEntity", b =>
                {
                    b.HasOne("Model.Entities.Users.RoleEntity", "Roles")
                        .WithMany("Users")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("Model.Entities.BoilerRoomEntity", b =>
                {
                    b.Navigation("BoilerDevices");
                });

            modelBuilder.Entity("Model.Entities.CompanyEntity", b =>
                {
                    b.Navigation("BoilerRoomEntities");
                });

            modelBuilder.Entity("Model.Entities.Users.RoleEntity", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
